(define-macro let 
  (bindings . body)
  (define (named-let name bindings body)
    `(let ((,name #f))
       (set! ,name (lambda ,(map car bindings) . ,body))
       (,name . ,(map cadr bindings))))
  (if (symbol? bindings) 
      (named-let bindings (car body) (cdr body))
      `((lambda ,(map car bindings) . ,body) . ,(map cadr bindings))))

(define-macro let* 
  (bindings . body)
  (if (null? bindings) `((lambda () . ,body))
      `(let (,(car bindings))
         (let* ,(cdr bindings) . ,body))))

(define-macro letrec 
  (bindings . body)
  (define (combine vars vals)
    (if (null? vars)
        (if (not (null? vals))
            (error "unmatched" vals)
            '())
        (if (null? vals)
            (error "unmatched" vals)
            (cons (list (car vars) (car vals))
                  (combine (cdr vars) (cdr vals))))))
  (let* ((vars (map car bindings)) 
         (vals (map cadr bindings))
         (pair (combine vars vals)))
    `(let ,(map (lambda (var) `(,var #f)) vars)
       ,@(map (lambda (p) `(set! ,(car p) ,(cadr p))) pair)
       . ,body)))

