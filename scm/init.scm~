; Copyright (c) 2014 Xianfei Shen
; All rights reserved.

; Permission is hereby granted, without written agreement and without
; license or royalty fees, to use, copy, modify, and distribute this
; software and its documentation for any purpose, provided that the
; above copyright notice and the following two paragraphs appear in
; all copies of this software.

; IN NO EVENT SHALL BRENT BENSON BE LIABLE TO ANY PARTY FOR DIRECT,
; INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
; OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF BRENT
; BENSON HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

; BRENT BENSON SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT
; NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
; FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER
; IS ON AN "AS IS" BASIS, AND BRENT BENSON HAS NO OBLIGATION TO
; PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
; MODIFICATIONS.

(load "scm/boolean.scm")
(load "scm/control.scm")
(load "scm/derived.scm")
(load "scm/extra.scm")
(load "scm/list.scm")
(load "scm/macro.scm")
(load "scm/number.scm")
(load "scm/pair.scm")
(load "scm/port.scm")
(load "scm/string.scm")
(load "scm/vector.scm")
     
(define gensym
  (let ((*gensym* 0))
    (lambda ()
      (set! *gensym* (+ *gensym* 1))
      (string->symbol (string-append 
                            "GenSym%" 
                             (number->string *gensym*))))))
                             
(define (list-tail x n)
  (cond ((zero? n) x)
        ((null? x) (wrong "list-tail: index out of range"))
        (else (list-tail (cdr x) (- n 1)))))

(define string->uninterned-symbol string->symbol)
             
(define (fib n)
  (if (< n 2)
      1 
      (+ (fib (- n 1))
         (fib (- n 2)))))

(define last-pair
  (lambda (x)
    (if (pair? (cdr x))
        (last-pair (cdr x))
        x)))

(define (list-copy l)
  (if (null? l)
      '()
      (cons (car l)
            (list-copy (cdr l)))))


